<web-app id="sdt" version="2.4" 
	xmlns="http://java.sun.com/xml/ns/j2ee" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee 
	http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd">
 
	<display-name>SDT Producer Application</display-name>
	
    <!-- This defines the locations of the Spring config files that make up the web application context. -->
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>
			/WEB-INF/applicationContext.xml,
            /WEB-INF/spring.datasource.xml,
            classpath*:uk/gov/moj/**/spring*.xml
        </param-value>
    </context-param>

    <!-- This defines webapp.root for log4j -->
    <context-param>
        <param-name>webAppRootKey</param-name>
        <param-value>producers.root</param-value>
    </context-param>

    <!-- Defines the location of the Log4J configuration file. -->
    <context-param>
        <param-name>log4jConfigLocation</param-name>
        <param-value>file:C:/disc/runtime/springsource/vfabric-tc-server-developer-2.6.3.RELEASE/disc-tc-server/conf/log4j.xml</param-value>
    </context-param>
	
    <!-- Refresh log4j configuration every 60 seconds. -->
    <context-param>
        <param-name>log4jRefreshInterval</param-name>
        <param-value>60000</param-value>
    </context-param>

    <!-- Listener to initialise Log4J. This is defined prior to the Spring context loader to ensure that logging starts
up as early as possible to ease diagnosis of Spring context initialisation issues. -->
    <listener>
        <listener-class>
            org.springframework.web.util.Log4jConfigListener
        </listener-class>
    </listener>

    <!-- Listener to initialise the Spring context - reads config from 'contextConfigLocation'. -->
    <listener>
        <listener-class>
            org.springframework.web.context.ContextLoaderListener
        </listener-class>
    </listener>
    
    <!-- Filter to perform clean up of the Sdt Context information in the Thread Local -->
    
    <filter>
    	<filter-name>ContextCleanUpFilter</filter-name>
    	<filter-class>uk.gov.moj.sdt.utils.web.filter.ContextCleanupFilter</filter-class>
    </filter>
    
    <!-- Pattern to indicate which path the filter should be applicable on. -->
    
    <filter-mapping>
    	<filter-name>ContextCleanUpFilter</filter-name>
    	<url-pattern>/service/*</url-pattern>
    </filter-mapping>
    
	<!-- Servlet to handle Spring Web Services  - necessary in all application exposing web service endpoints -->
	<servlet>
    	<servlet-name>cxfServlet</servlet-name>
    	<servlet-class>org.apache.cxf.transport.servlet.CXFServlet</servlet-class>
  	</servlet>
 
	<!-- Pattern to reach web service endpoint -->
	<servlet-mapping>
        <servlet-name>cxfServlet</servlet-name>
        <url-pattern>/service/*</url-pattern>
    </servlet-mapping>
	
	<!-- Datasource for SDT -->
	<resource-ref>
        <res-ref-name>jdbc/SDTDB</res-ref-name>
        <res-type>javax.sql.DataSource</res-type>
        <res-auth>Container</res-auth>
    </resource-ref>

	<!-- MQ Connection Factory for SDT -->
	<resource-ref>
        <res-ref-name>jms/mqConnectionFactory</res-ref-name>
        <res-type>org.apache.activemq.ActiveMQConnectionFactory</res-type>
        <res-auth>Container</res-auth>
    </resource-ref>
 
</web-app>