<!-- ===========================================================================
 = SDT Project
 =
 = Name:        build-setup-env.xml
 = Description: Top level build file to define environment and standard properties.
 =
 = $Revision: $
 = $Author: $
 = $Date: $
 = $URL: $
 =
 = Copyright Logica UK Ltd. 2012
 =========================================================================== -->

<project name="build-setup-env" basedir=".">

	<!-- Add ANT contrib for additional targets -->
	<taskdef resource="net/sf/antcontrib/antcontrib.properties" />

	<!-- Add Tigris SVNANT -->
   <!--	<taskdef resource="org/tigris/subversion/svnant/svnantlib.xml" /> -->

	<!-- Get ANT to tell us the directory where this script lives. -->
	<dirname file="${ant.file.build-setup-env}" property="this.dir" />

	<!-- Make environment variables available to this script.
         Provides all environment variables as Ant properties prefixed by "env.",
         for example, CLASSPATH would be accessible in Ant as ${env.CLASSPATH}. -->
	<property environment="env" />

	<!-- Load personalised properties; these override other configured properties -->
	<property name="env.LOCAL_PROPERTIES" value="${this.dir}/local.properties" />
	<property name="local.properties" value="${env.LOCAL_PROPERTIES}" />
	<property file="${local.properties}" />
	<!-- Ignored if does not exist -->

	<!-- Check if env.properties exists and if not, create it -->
	<if>
		<not>
			<isset property="env.properties.copied" />
		</not>
		<then>
			<!-- Bootstrap the environment: do this before env.properties is loaded -->
			<copy todir="../build" overwrite="true">
				<fileset dir="../build">
					<include name="env.properties.template" />
				</fileset>
				<filterchain>
					<filterreader classname="org.apache.tools.ant.filters.ExpandProperties" />
				</filterchain>
				<mapper type="glob" from="*.template" to="*" />
			</copy>
			<property name="env.properties.copied" value="true" />
		</then>
	</if>

	<!-- Load build properties -->
	<property name="env.ENV_PROPERTIES" value="${this.dir}/env.properties" />
	<property name="env.properties" value="${env.ENV_PROPERTIES}" />
	<property file="${env.properties}" />
	<!-- Ignored if does not exist -->

	<!-- Load build properties -->
	<property name="env.BATCH_PROPERTIES" value="${this.dir}/../batch/src/integ-test/filters/batch.properties" />
	<property name="batch.properties" value="${env.BATCH_PROPERTIES}" />
	<property file="${batch.properties}" />
	<!-- Ignored if does not exist -->


	<!-- Load deployment properties -->
	<property name="env.DEPLOY_PROPERTIES" value="${this.dir}/deploy.properties" />
	<property name="deploy.properties" value="${env.DEPLOY_PROPERTIES}" />
	<property file="${deploy.properties}" />
	<!-- Ignored if does not exist -->

	<!-- Load Eclipse build properties -->
	<property name="env.test_PROPERTIES" value="${this.dir}/test.properties" />
	<property name="test.properties" value="${env.test_PROPERTIES}" />
	<property file="${test.properties}" />

	<!-- Templatise the maven library locations - to set paths for windows/mac -->
	  <copy todir="" overwrite="true">
	    <fileset dir="">
	      <include name="sdt_3rd_party.userlibraries.template" />
	    </fileset>
	    <filterchain>
	      <filterreader classname="org.apache.tools.ant.filters.ExpandProperties" />
	    </filterchain>
	    <mapper type="glob" from="*.template" to="*" />
	  </copy>


	<!-- Derive name of jar file from ANT project name -->
	<property name="dist.jar" value="${ant.project.name}.jar" />

	<!-- Derive name of jar file from ANT project name -->
	<property name="dist.war" value="${ant.project.name}.war" />

	<!-- Derive name of test jar file from ANT project name -->
	<property name="dist.test.jar" value="${ant.project.name}-test.jar" />

	<!-- yui-compressor task definition -->
	<taskdef name="yui-compressor" classname="net.noha.tools.ant.yuicompressor.tasks.YuiCompressorTask">

		<classpath>
			<fileset dir="${ant.runtime.dir}/lib" includes="*.jar" />
		</classpath>
	</taskdef>

    <!-- Add JaCoCo target -->
    <taskdef uri="antlib:org.jacoco.ant" resource="org/jacoco/ant/antlib.xml">
        <classpath>
            <fileset dir="${ant.runtime.dir}/lib" includes="jacoco*.jar" />
        </classpath>
    </taskdef>

    <!-- Add WebLogic task definition -->
    <taskdef name="wldeploy" classname="weblogic.ant.taskdefs.management.WLDeploy"/>

    <!-- Set properties based on other property values -->
	<condition property="tc-server.exists">
		<equals arg1="${application.server}" arg2="tc-server" />
	</condition>
	<condition property="oas.exists">
		<equals arg1="${application.server}" arg2="oas" />
	</condition>
    <condition property="weblogic.exists">
        <equals arg1="${application.server}" arg2="weblogic" />
    </condition>
	<condition property="remote-copy.exists">
		<equals arg1="${application.server}" arg2="remote-copy" />
	</condition>

	<condition property="remote-tc-server.exists">
		<equals arg1="${application.server}" arg2="remote-tc-server" />
	</condition>

	<!-- Set property based on current operating system family -->
	<condition property="isUnix">
		<os family="unix" />
	</condition>
	<condition property="isWindows">
		<os family="windows" />
	</condition>
	<if>
		<isset property="isWindows" />
		<then>
			<!-- <echo level="info" message="Operating system is windows" /> -->
		</then>
		<elseif>
			<isset property="isUnix" />
			<then>
				<!-- <echo level="info" message="Operating system is unix" /> -->
			</then>
		</elseif>
	</if>

	<!-- Tomcat Ant Task definitions -->
	<if>
		<isset property="tc-server.exists" />
		<then>
			<path id="tomcat-ant-libs">
				<fileset dir="${tomcat-lib.dir}/../">
					<include name="lib/catalina-ant.jar" />
					<include name="lib/tomcat-coyote.jar" />
					<include name="lib/tomcat-util.jar" />
					<include name="bin/tomcat-juli.jar" />
				</fileset>
			</path>

			<taskdef name="deploy-tomcat" classname="org.apache.catalina.ant.DeployTask">
				<classpath refid="tomcat-ant-libs" />
			</taskdef>
			<taskdef name="list-tomcat" classname="org.apache.catalina.ant.ListTask">
				<classpath refid="tomcat-ant-libs" />
			</taskdef>
			<taskdef name="reload-tomcat" classname="org.apache.catalina.ant.ReloadTask">
				<classpath refid="tomcat-ant-libs" />
			</taskdef>
			<taskdef name="findleaks-tomcat" classname="org.apache.catalina.ant.FindLeaksTask">
				<classpath refid="tomcat-ant-libs" />
			</taskdef>
			<taskdef name="resources-tomcat" classname="org.apache.catalina.ant.ResourcesTask">
				<classpath refid="tomcat-ant-libs" />
			</taskdef>
			<taskdef name="undeploy" classname="org.apache.catalina.ant.UndeployTask">
				<classpath refid="tomcat-ant-libs" />
			</taskdef>
			<taskdef name="start-tomcat" classname="org.apache.catalina.ant.StartTask">
				<classpath refid="tomcat-ant-libs" />
			</taskdef>
			<taskdef name="stop-tomcat" classname="org.apache.catalina.ant.StopTask">
				<classpath refid="tomcat-ant-libs" />
			</taskdef>
		</then>
	</if>

	<!-- svnSetting is necessary for linux -->
	<!--
	<svnSetting javahl="false" svnkit="true" id="svn.settings" />
	<svn refid="svn.settings">
		<status path="${basedir}" revisionProperty="buildNumber" />
	</svn>
	-->

</project>


