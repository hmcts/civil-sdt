<!-- ===========================================================================
 = SDT
 =
 = Name:        build-app.xml
 = Description: Top level build file for SDT workspace 
 =
 = $Revision: $
 = $Author: $
 = $Date: $
 = $URL: $
 =
 = Copyright Logica UK Ltd. 2012
 =========================================================================== -->

<project name="top-level" basedir=".">

    <!-- LOAD STANDARD PROPERTIES FROM ENVIRONMENT VARIABLES AND PROPERTY FILES -->
    <import file="../build/build-setup-env.xml" />

    <!-- List of all projects in order - note dirset cannot control order of execution -->
    <filelist id="all-project-list" dir=".">
        <file name="../utils/build.xml" />
        <file name="../domain/build.xml" />
    	<file name="../dao-api/build.xml" />
        <file name="../dao/build.xml" />
        <file name="../producers-api/build.xml" />
    	<file name="../validators/build.xml" />
    	<file name="../interceptors/build.xml" />
        <file name="../transformers/build.xml" />
        <file name="../consumers/build.xml" /> 
        <file name="../services-api/build.xml" />
        <file name="../services/build.xml" />       
    	<file name="../handlers-api/build.xml" />
    	<file name="../handlers/build.xml" />
        <file name="../producers/build.xml" />
        <file name="../producers-commissioning/build.xml" />
        <file name="../database/build.xml" />
    </filelist>

    <!-- List of projects for which deploy is needed in order - note dirset cannot control order of execution -->
    <filelist id="deploy-project-list" dir=".">
        <file name="../database/build.xml" />
        <file name="../producers/build.xml" />
        <file name="../producers-commissioning/build.xml" />
    </filelist>

	<!-- List of projects for which deploy is needed in order - note dirset cannot control order of execution -->
    <filelist id="remote-deploy-project-list" dir=".">
        <file name="../database/build.xml" />
        <file name="../producers/build.xml" />
        <file name="../producers-commissioning/build.xml" />
    </filelist>

    <!-- List of projects for which web services contract should be zipped -->
    <filelist id="dist-ws-contract-project-list" dir=".">
        <file name="../producers-api/build.xml" />
    </filelist>

	<!-- TARGETS -->

    <!-- General initialisation - ensure build directory (for classes) and dist directory (for jar) are present -->
    <target name="init" description="Initialise">
    	<!-- Initialise the stopwatch fore logging build times -->
    	<stopwatch name="timer1"/>    	
    </target>

    <!-- Delete all build artefacts -->
    <target name="clean-application" description="Cleanup build and distribution folders for all projects">
    	<tstamp>
    		<format property="now" pattern="yyyy-MM-dd HH:mm:ss"/>
    	</tstamp>
    	<echo file="build.log" append="true">${now}: Cleaning application ${line.separator}</echo>
        <subant antfile="build.xml" target="clean" inheritrefs="true" inheritAll="false">
            <filelist refid="all-project-list" />
        </subant>
        <delete dir="${lib.app.dir}" />
        <delete dir="${lib.test.dir}" />
        <delete dir="${junit.unit.test-reports.dir}" />
        <delete dir="${junit.integ.test-reports.dir}" />
        <delete dir="${junit.endtoend.test-reports.dir}" /> 
    	<delete verbose="true" failonerror="false">
    		 <fileset dir="../${logs.dir}" includes="sdt*.*"/>
    	</delete>
    </target>

    <!-- Delete deployed war in tc-server -->
    <target name="clean-tc-server" description="Cleanup tc-server exploded war directories, cache and war files.">
    	<tstamp>
    		<format property="now" pattern="yyyy-MM-dd HH:mm:ss"/>
    	</tstamp>
    	<echo file="build.log" append="true">${now}: Cleaning tc-server ${line.separator}</echo>
    	
        <delete file="${app.server.webapps.dir}/producers.war" />
        <delete file="${app.server.webapps.dir}/producers-comx.war" />
        <delete dir="${app.server.webapps.dir}/producers" />
        <delete dir="${app.server.webapps.dir}/producers-comx" />

        <!-- Delete cached servlets generated from jsps, even for insight application -->
        <delete dir="${app.server.webapps.dir}/../work/Catalina/localhost/_" />
        <delete dir="${app.server.webapps.dir}/../work/Catalina/localhost/insight" />
        <delete>
            <dirset dir="${app.server.webapps.dir}/../work/Catalina/localhost" erroronmissingdir="false">
                <include name="**" />
            </dirset>
        </delete>
    </target>

    <!-- Start server instance. This should only be run on Hudson box or it interferes with Eclipse 
         tc-server integration. -->
    <target name="-start-tc-server" if="isUnix" description="Start the server instance of tc-server">
    	<exec executable="${app.server.dir}/bin/startup.bat" failonerror="true" dir="${app.server.dir}" >
            <arg value="start" />
        </exec>
    </target>

    <!-- Stop server instance. This should only be run on Hudson box or it interferes with Eclipse 
         tc-server integration. -->
    <target name="-stop-tc-server" if="isUnix" description="Stop the server instance of tc-server">
    	<exec executable="${app.server.dir}/bin/shutdown.bat" failonerror="false" dir="${app.server.dir}" >
            <arg value="stop" />
            <arg value="--force" />
        </exec>
    </target>
	
	<!-- Start the apache active mq server. -->
	<target name="start-activemq-server" description="Start the active mq messaging server">
		<parallel>
	        <exec executable="${activemq.dir}/activemq.bat" failonerror="true" dir="${activemq.dir}" >
	        </exec>
		</parallel>	
	</target>

    <!-- Create baseline SDT schema and objects and migrate forward to current -->
    <target name="build-baseline-database" depends="init" description="Builds the DB by creating schema and schema objects">
        <ant antfile="build.xml" dir="${database.dir}" target="build-baseline-database" inheritrefs="true" inheritAll="false" />
    </target>

    <!-- Create current SDT schema and objects -->
    <target name="build-current-database" depends="init" description="Builds the DB by creating schema and schema objects">
        <ant antfile="build.xml" dir="${database.dir}" target="build-current-database" inheritrefs="true" inheritAll="false" />
    </target>

    <!-- Configures all template files required for build -->
    <target name="configure-all-prop-files" depends="init" description="Build all properties files from templates">
        <subant antfile="build.xml" target="configure-property-files" inheritrefs="true" inheritAll="false">
            <filelist refid="all-project-list" />
            <filelist>
                <file name="../Servers/build.xml" />
            </filelist>
        </subant>
    </target>

    <!-- Compile and create distribution jar for all source code once to prove all compiles. -->
    <target name="dist-all" depends="configure-all-prop-files" description="Compile and create distribution jar for all source code once ">
        <subant antfile="build.xml" target="dist" inheritrefs="true" inheritAll="false">
            <filelist refid="all-project-list" />
        </subant>
    </target>

    <!-- Compile and create distribution jar for all test source code once to prove all compiles. -->
    <target name="dist-all-tests" depends="configure-all-prop-files" description="Compile and create distribution jar for all test source code once ">
        <subant antfile="build.xml" target="dist-tests" inheritrefs="true" inheritAll="false">
            <filelist refid="all-project-list" />
        </subant>
    </target>

    <!-- Compile and create distribution jar for all test source code once to prove all compiles. -->
    <target name="deploy-all" depends="init, dist-all" description="Deploy all artefacts to application server ">
        <subant antfile="build.xml" target="deploy" inheritrefs="true" inheritAll="false">
            <filelist refid="deploy-project-list" />
        </subant>

		<!-- Copy log4j2.xml file into the tc-server area if this is tc-server -->
		<copy todir="${app.server.dir}/conf" overwrite="true">
			<fileset dir="${utils.dir}/${src.dir}">
				<include name="log4j2.xml" />
			</fileset>
		</copy>
    	
    	<!-- Log the time the build took -->
    	<tstamp>
    		<format property="now" pattern="yyyy-MM-dd HH:mm:ss"/>
    	</tstamp>
    	    
    	<stopwatch name="timer1" action="total"/>    	
    		
    	<echo file="build.log" append="true">${now}: Build time ${timer1} ${line.separator}</echo>
    	 
    </target>
	
    <!-- Compile and create distribution jar for all test source code once to prove all compiles. -->
    <target name="deploy-remote-all" depends="init, dist-all" description="Deploy all artefacts to application server ">
        <subant antfile="build.xml" target="deploy" inheritrefs="true" inheritAll="false">
            <filelist refid="remote-deploy-project-list" />
        </subant>

    	<property name="sshout" value=""/>
		<!-- this will be redundunt for other than tc-server -->
		<sshexec host="${remote.deploy.host}" username="${remote.deploy.user}" password="${remote.deploy.password}" 
			command="${remote.app-server.dir}/bin/tcruntime-ctl.sh stop" trust="true" failonerror="false" />
		<sshexec host="${remote.deploy.host}" username="${remote.deploy.user}" password="${remote.deploy.password}"
    		command="rm -rf ${remote.app-server.dir}/${remote.app-server.hotdeploy.dir}/prod*" trust="true" failonerror="true" />
		<sshexec host="${remote.deploy.host}" username="${remote.deploy.user}" password="${remote.deploy.password}" 
    	    command="cp ${remote.deploy.dir}/${application.version}.${buildNumber}/* ${remote.app-server.dir}/${remote.app-server.hotdeploy.dir}/" 
			trust="true" failonerror="true"/>
		<!--scp todir="${remote.deploy.user}:${remote.deploy.password}@${remote.deploy.host}:${remote.app-server.dir}/conf" trust="true" failonerror="true" >
			<fileset dir="${utils.dir}/${src.dir}">
				<include name="log4j.xml" />
			</fileset>
    	</scp-->
		<sshexec host="${remote.deploy.host}" username="${remote.deploy.user}" password="${remote.deploy.password}" 
			command="${remote.app-server.dir}/bin/tcruntime-ctl.sh start" trust="true" failonerror="true" />
		<!-- =============================================== -->

    	
    	<!-- Log the time the build took -->
    	<tstamp>
    		<format property="now" pattern="yyyy-MM-dd HH:mm:ss"/>
    	</tstamp>
    	    
    	<stopwatch name="timer1" action="total"/>    	
    		
    	<echo file="build.log" append="true">${now}: Build time ${timer1} ${line.separator}</echo>
    	 
    </target>

    <!-- Compile and create distribution ear for upload to nexus -->
    <target name="generate-ear-for-nexus" depends="" description="Generate EAR binaries for upload to Nexus">
        <subant antfile="build.xml" target="generate-ear" inheritrefs="true" inheritAll="false">
            <filelist refid="remote-deploy-project-list" />
        </subant>
    </target>

	<!-- Run unit tests in all modules -->
    <target name="run-all-unit-tests" depends="dist-all,dist-all-tests" description="Run all unit tests">
		<subant genericantfile="build.xml" inheritrefs="true" inheritAll="false">
		    <filelist refid="all-project-list" />
			<target name="run-unit-tests" />
		</subant>

        <antcall target="generate-all-unit-test-reports" />
    </target>
	
    <!-- Run integration tests in all modules -->
    <target name="run-all-integration-tests" depends="dist-all, dist-all-tests" description="Run all integration tests">
        <subant antfile="build.xml" inheritrefs="true" inheritAll="false">
        	<filelist refid="all-project-list" />
        	<target name="run-integration-tests"/> 
        </subant>
        
        <antcall target="generate-all-integ-test-reports" />
    </target>
	
	<!-- Run end to end tests in all modules -->
    <target name="run-all-endtoend-tests" depends="-stop-tc-server, deploy-all, dist-all-tests, -start-tc-server" description="Run all end to end tests">
    	
    	<sleep seconds="30"/>
    	
        <subant antfile="build.xml" inheritrefs="true" inheritAll="false">
        	<filelist refid="all-project-list" />
        	<target name="run-endtoend-tests"/> 
        </subant>
    	
    	<antcall target="-stop-tc-server"/>
        
        <antcall target="generate-all-endtoend-test-reports" />
    </target>
	
	<!-- 
		Run end to end tests in all modules on the dev machine (from eclipse)
		NOTE - Please run the deploy-all and start the tomcat server before running
		this task. 
	-->
    <target name="run-local-endtoend-tests" depends="dist-all, dist-all-tests" description="Run local end to end tests">
    	
        <subant antfile="build.xml" inheritrefs="true" inheritAll="false">
        	<filelist refid="all-project-list" />
        	<target name="run-endtoend-tests"/> 
        </subant>
    	
        <antcall target="generate-all-endtoend-test-reports" />
    </target>

    <target name="generate-all-unit-test-reports" description="Generates the unit test reports once all unit tests have been run">
        <mkdir dir="${junit.unit.test-reports.dir}" />
        <junitreport todir="${junit.unit.test-reports.dir}">
            <fileset dir="../">
                <include name="**/${junit.unit.output.dir}/TEST-*.xml" />
            </fileset>
            <report format="frames" todir="${junit.unit.test-reports.dir}" />
        </junitreport>
    </target>

    <target name="generate-all-integ-test-reports" description="Generates the integration test reports once all integration tests have been run">
        <mkdir dir="${junit.integ.test-reports.dir}" />
        <junitreport todir="${junit.integ.test-reports.dir}">
            <fileset dir="../">
                <include name="**/${junit.integ.output.dir}/TEST-*.xml" />
            </fileset>
            <report format="frames" todir="${junit.integ.test-reports.dir}" />
        </junitreport>
    </target>
	
	<target name="generate-all-endtoend-test-reports" description="Generates the end to end test reports once all end to end tests have been run">
        <mkdir dir="${junit.endtoend.test-reports.dir}" />
        <junitreport todir="${junit.endtoend.test-reports.dir}">
            <fileset dir="../">
                <include name="**/${junit.endtoend.output.dir}/TEST-*.xml" />
            </fileset>
            <report format="frames" todir="${junit.endtoend.test-reports.dir}" />
        </junitreport>
	</target>

	<!-- Generate Javadoc for all modules -->
    <target name="generate-all-javadocs" depends="init" description="Generate code documentation for all modules">
        <delete dir="${javadoc.dir}" />
        <mkdir dir="${javadoc.dir}" />

        <subant antfile="build.xml" target="generate_javadoc" inheritrefs="true" inheritAll="false">
            <filelist refid="all-project-list" />
        </subant>
    </target>

    <!-- Generate source code from WSDL -->
    <target name="generate-from-wsdl" description="Generate code from WSDL for all projects">
        <subant antfile="build.xml" target="generate-from-wsdl" inheritrefs="true" inheritAll="false">
            <filelist refid="all-project-list" />
        </subant>
    </target>

    <!-- Generate source code from WSDL for External Client -->
    <target name="generate-from-wsdl-client" description="Generate code from WSDL for SDK project">
        <subant antfile="build.xml" target="generate-from-wsdl-client" inheritrefs="true" inheritAll="false">
            <filelist dir=".">
                <file name="../sdt-consumer-sample/build.xml" />
            </filelist>
        </subant>
    </target>
	
	<!-- Run diagnostics report -->
    <target name="diagnostics" depends="init" description="Output diagnostics of ANT">
        <diagnostics />
    </target>

    <!-- Echo properties used by ANT -->
    <target name="echoproperties" depends="init" description="List ANT properties">
        <echoproperties />
    </target>

    <!-- Prepare distribution artefacts for web services -->
    <target name="dist-ws-contract" depends="configure-all-prop-files" description="Prepare distribution artefacts for web services's WSDLs and XSDs">
        <subant antfile="build.xml" target="dist-ws-contract" inheritrefs="true" inheritAll="false">
            <filelist refid="dist-ws-contract-project-list" />
        </subant>
    </target>

</project>
