plugins {
  id 'application'
  id 'checkstyle'
  id 'jacoco'
  id 'java'
  id "io.freefair.lombok" version "6.5.1"
  id 'io.spring.dependency-management' version '1.0.13.RELEASE'
  id 'org.springframework.boot' version '2.7.3'
  id 'org.owasp.dependencycheck' version '6.5.3'
  id 'com.github.kt3k.coveralls' version '2.8.2'
  id 'com.github.ben-manes.versions' version '0.42.0'
  id 'org.sonarqube' version '3.4.0.2513'
  id 'uk.gov.hmcts.java' version '0.12.0'
  id "com.jfrog.bintray" version "1.8.5" apply false
}

group = 'uk.gov.hmcts.civil.sdt'
version = '0.0.1'

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(17)
  }
}

sourceSets {
  functionalTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/functionalTest/java')
    }
    resources.srcDir file('src/functionalTest/resources')
  }

  integrationTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/integrationTest/java')
    }
    resources.srcDir file('src/integrationTest/resources')
  }

  smokeTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/smokeTest/java')
    }
    resources.srcDir file('src/smokeTest/resources')
  }
}

configurations {
  functionalTestImplementation.extendsFrom testImplementation
  functionalTestRuntimeOnly.extendsFrom runtimeOnly

  integrationTestImplementation.extendsFrom testImplementation
  integrationTestRuntimeOnly.extendsFrom runtimeOnly

  smokeTestImplementation.extendsFrom testImplementation
  smokeTestRuntimeOnly.extendsFrom runtimeOnly
}

tasks.withType(JavaCompile) {
  options.compilerArgs << "-Xlint:unchecked" << "-Werror"
}

// https://github.com/gradle/gradle/issues/16791
tasks.withType(JavaExec).configureEach {
  javaLauncher.set(javaToolchains.launcherFor(java.toolchain))
}

tasks.withType(Test) {
  useJUnitPlatform()

  testLogging {
    exceptionFormat = 'full'
  }
}

test {
  failFast = true
}

task functional(type: Test) {
  description = "Runs functional tests"
  group = "Verification"
  testClassesDirs = sourceSets.functionalTest.output.classesDirs
  classpath = sourceSets.functionalTest.runtimeClasspath
}

task integration(type: Test) {
  description = "Runs integration tests"
  group = "Verification"
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
  failFast = true
}

task smoke(type: Test) {
  description = "Runs Smoke Tests"
  testClassesDirs = sourceSets.smokeTest.output.classesDirs
  classpath = sourceSets.smokeTest.runtimeClasspath
}

checkstyle {
  maxWarnings = 0
  toolVersion = '9.2.1'
  getConfigDirectory().set(new File(rootDir, 'config/checkstyle'))
}

jacocoTestReport {
  executionData(test, integration)
  reports {
    xml.required = true
    csv.required = false
    xml.destination file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml")
  }
}

project.tasks['sonarqube'].dependsOn jacocoTestReport
project.tasks['check'].dependsOn integration

sonarqube {
  properties {
    property "sonar.projectName", "Reform :: civil-sdt"
    property "sonar.projectKey", "uk.gov.hmcts.reform:civil-sdt"
    property "sonar.coverage.jacoco.xmlReportPaths", "${jacocoTestReport.reports.xml.destination.path}"
  }
}

// before committing a change, make sure task still works
dependencyUpdates {
  def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { qualifier -> version.toUpperCase().contains(qualifier) }
    def regex = /^[0-9,.v-]+$/
    return !stableKeyword && !(version ==~ regex)
  }
  rejectVersionIf { selection -> // <---- notice how the closure argument is named
    return isNonStable(selection.candidate.version) && !isNonStable(selection.currentVersion)
  }
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
  // Specifies if the build should be failed if a CVSS score above a specified level is identified.
  // range of 0-10 fails the build, anything greater and it doesn't fail the build
  failBuildOnCVSS = 0
  suppressionFile = 'config/owasp/suppressions.xml'

  analyzers {
    // Disable scanning of .NET related binaries
    assemblyEnabled = false
  }
}

ext {
  log4JVersion = "2.17.0"
  restAssuredVersion = '4.3.0!!'
  lombokVersion = "1.18.24"
  junit_version = "4.12"
  junitJupiterVersion = '5.7.1'
  junitVintageVersion = '5.7.1'
  powermockVersion = '2.0.7'
  springSecurity   =  '5.7.1'
  springCloudVersion = '2021.0.3'
  springfoxSwaggerVersion = '3.0.0'
  hamcrestVersion = '1.3'
  reformLogging= '5.1.9'
  groovyVersion = '3.0.2!!'
  tomcatVersion = '9.0.58!!'
  hibernateVersion = '5.4.24.Final!!'
  feignJackson = '11.6'
  limits = [
    'instruction': 99,
    'branch'     : 99,
    'line'       : 99,
    'complexity' : 89,
    'method'     : 99,
    'class'      : 90
  ]
}

ext['jackson.version'] = '2.14.0-rc1'
ext['snakeyaml.version'] = '1.33'
ext['spring-security.version'] = '5.7.3'
ext['postgresql.version'] = '42.2.16'
ext['hibernate-validator.version'] = '6.0.20.Final'
ext {
  springBootVersion = '2.4.4'
}

allprojects {
  group 'uk.gov.hmcts.civil.sdt'
  version '0.0.1-SNAPSHOT'

  repositories {
    mavenLocal()
    mavenCentral()
    maven {
      url  "https://jitpack.io"
    }
  }

  apply plugin: 'java'

  dependencies {
    testImplementation ("org.springframework.boot:spring-boot-starter-test:${springBootVersion}"){
      exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    implementation  group: 'com.fasterxml.jackson.module', name: 'jackson-module-jaxb-annotations', version: '2.10.3'
    implementation 'net.minidev:json-smart:2.4.7'
  }

  // Global constraints
  dependencies {
    implementation "org.apache.tomcat.embed:tomcat-embed-core:${tomcatVersion}"
    implementation "org.apache.tomcat.embed:tomcat-embed-el:${tomcatVersion}"
    implementation "org.apache.tomcat.embed:tomcat-embed-websocket:${tomcatVersion}"
    implementation "com.fasterxml.jackson.core:jackson-databind:2.11.1"
    implementation group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.13'
    implementation group: 'com.vladmihalcea', name: 'hibernate-types-52', version: '2.20.0'
    implementation 'org.hibernate:hibernate-validator:7.0.5.Final'
    implementation "org.apache.commons:commons-compress:1.21"
    implementation "org.glassfish:jakarta.el:4.0.1"
    implementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.10'
    implementation group: 'ch.qos.logback', name: 'logback-core', version: '1.2.10'
    testImplementation "io.rest-assured:xml-path:${restAssuredVersion}"
    testImplementation "io.rest-assured:json-path:${restAssuredVersion}"
    testImplementation "org.codehaus.groovy:groovy:${groovyVersion}"
    testImplementation "org.codehaus.groovy:groovy-xml:${groovyVersion}"
    testImplementation "org.codehaus.groovy:groovy-json:${groovyVersion}"
    testImplementation 'com.github.hmcts:fortify-client:1.2.0:all'
  }

  configurations.all {
    collect { configuration ->
      configuration.exclude group: 'org.apache.logging.log4j', module: 'log4j-to-slf4j'
    }
    resolutionStrategy {
      eachDependency { details ->
        if (details.requested.group == 'com.github.ben-manes.caffeine' && details.requested.name == 'caffeine') {
          details.useVersion '2.8.5'
        }
      }
    }
  }
}

dependencies {
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-aop'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-json'

  implementation group: 'org.springdoc', name: 'springdoc-openapi-ui', version: '1.6.7'

  implementation group: 'com.github.hmcts.java-logging', name: 'logging', version: '6.0.1'

  implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: log4JVersion
  implementation group: 'org.apache.logging.log4j', name: 'log4j-to-slf4j', version: log4JVersion

  implementation(group: 'org.springframework.boot', name: 'spring-boot-starter-jdbc') {
    exclude group: 'org.apache.tomcat', module: 'tomcat-jdbc'
  }
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-security'
  implementation group: 'org.flywaydb', name: 'flyway-core', version: '9.5.0'
  implementation group: 'org.postgresql', name: 'postgresql', version: '42.2.16'

  testImplementation group: 'org.postgresql', name: 'postgresql', version: '42.2.16'
  testImplementation group: 'org.testcontainers', name: 'postgresql', version: '1.15.1'
  implementation group: 'io.rest-assured', name: 'rest-assured'

  testImplementation(platform('org.junit:junit-bom:5.8.2'))
  testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
  testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test', {
    exclude group: 'junit', module: 'junit'
    exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
  }
}

mainClassName = 'uk.gov.hmcts.reform.demo.Application'

bootJar {
  archiveFileName = "civil-sdt.jar"

  manifest {
    attributes('Implementation-Version': project.version.toString())
  }
}

// Gradle 7.x issue, workaround from: https://github.com/gradle/gradle/issues/17236#issuecomment-894768083
rootProject.tasks.named("processSmokeTestResources") {
  duplicatesStrategy = 'include'
}

wrapper {
    distributionType = Wrapper.DistributionType.ALL
}
