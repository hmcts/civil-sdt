plugins {
  id 'se.patrikerdes.use-latest-versions' version '0.2.7'

  id 'application'
  id 'checkstyle'
  id 'jacoco'
  id 'java'
  id "io.freefair.lombok" version "6.5.1"
  id 'io.spring.dependency-management' version '1.1.0'
  id 'com.github.ben-manes.versions' version '0.44.0'
  id 'org.springframework.boot' version '2.7.12'
  id 'org.owasp.dependencycheck' version '8.0.2'
  id 'com.github.kt3k.coveralls' version '2.8.2'
  id 'com.github.spacialcircumstances.gradle-cucumber-reporting' version '0.1.23'
  id 'org.sonarqube' version '3.4.0.2513'
  id 'uk.gov.hmcts.java' version '0.12.27'
  id "info.solidsoft.pitest" version '1.5.1' apply(false)
  id "org.jetbrains.gradle.plugin.idea-ext" version "0.7"
}

group = 'uk.gov.hmcts.civil.sdt'
version = '0.0.1'

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(17)
  }
}

sourceSets {
  functionalTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/functionalTest/java')
    }
    resources.srcDir file('src/functionalTest/resources')
  }

  integrationTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/integrationTest/java')
    }
    resources.srcDir file('src/integrationTest/resources')
  }

  smokeTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/smokeTest/java')
    }
    resources.srcDir file('src/smokeTest/resources')
  }

  endToEndTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/endToEndTest/java')
    }
    resources.srcDir file('src/endToEndTest/resources')
  }

}

configurations {
  functionalTestImplementation.extendsFrom testImplementation
  functionalTestRuntimeOnly.extendsFrom runtimeOnly

  integrationTestImplementation.extendsFrom testImplementation
  integrationTestRuntimeOnly.extendsFrom runtimeOnly

  smokeTestImplementation.extendsFrom testImplementation
  smokeTestRuntimeOnly.extendsFrom runtimeOnly

  endToEndTestImplementation.extendsFrom testImplementation
  endToEndTestRuntimeOnly.extendsFrom runtimeOnly
}

tasks.withType(JavaCompile).configureEach {
  options.compilerArgs << "-Xlint:unchecked" << "-Werror"
}

// https://github.com/gradle/gradle/issues/16791
tasks.withType(JavaExec).configureEach {
  javaLauncher.set(javaToolchains.launcherFor(java.toolchain))
}

tasks.withType(Test).configureEach {
  useJUnitPlatform()

  testLogging {
    exceptionFormat = 'full'
  }
}

test {
  failFast = true
}

tasks.register('functional', Test) {
  description = "Runs functional tests"
  group = "Verification"
  testClassesDirs = sourceSets.functionalTest.output.classesDirs
  classpath = sourceSets.functionalTest.runtimeClasspath
}

tasks.register('integration', Test) {
  description = "Runs integration tests"
  group = "Verification"
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
  failFast = true
}

tasks.register('smoke', Test) {
  description = "Runs Smoke Tests"
  testClassesDirs = sourceSets.smokeTest.output.classesDirs
  classpath = sourceSets.smokeTest.runtimeClasspath
}

task endToEnd(type: Test) {
  description = "Runs End To End Tests"
  testClassesDirs = sourceSets.endToEndTest.output.classesDirs
  classpath = sourceSets.endToEndTest.runtimeClasspath
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'application'
apply plugin: "org.sonarqube"
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.github.ben-manes.versions'

mainClassName = 'uk.gov.moj.sdt.Application'

dependencyCheck {
  // Specifies if the build should be failed if a CVSS score above a specified level is identified.
  // range of 0-10 fails the build, anything greater and it doesn't fail the build
  failBuildOnCVSS = 0
  suppressionFile = 'config/owasp/suppressions.xml'

  analyzers {
    // Disable scanning of .NET related binaries
    assemblyEnabled = false
  }
}

ext {
  lombokVersion = '1.18.24'
  feignJackson = '11.6'
  groovyVersion = '3.0.13!!'
  hamcrestVersion = '1.3'
  junitVersion           = '5.7.2'
  junitPlatformVersion   = '1.7.2'
  log4jVersion = '2.17.1'
  postgresqlVersion = '42.5.1'
  reformLogging= '5.1.9'
  restAssuredVersion = '4.3.0!!'
  springCloudVersion = '2021.0.6'
  tomcatVersion = '9.0.75'
  cxfVersion = '3.5.5'
  jaxwsVersion = "2.3.1"
  activeMQVersion = '5.16.1'
  testcontainers = '1.17.5'
  sdtCommonVersion = '1.0.0'
  limits = [
    'instruction': 99,
    'branch'     : 99,
    'line'       : 99,
    'complexity' : 89,
    'method'     : 99,
    'class'      : 90
  ]
}

ext['jackson.version'] = '2.14.0'

ext.libraries = [
        junit5: [
                "org.junit.jupiter:junit-jupiter-api:${junitVersion}",
                "org.junit.jupiter:junit-jupiter-engine:${junitVersion}",
                "org.junit.jupiter:junit-jupiter-params:${junitVersion}",
                "org.junit.platform:junit-platform-commons:${junitPlatformVersion}",
                "org.junit.platform:junit-platform-engine:${junitPlatformVersion}"
        ]
]

ext['guava.version'] = '30.0-jre'
ext['apache.poi.version'] = '4.1.0'
ext['snakeyaml.version'] = '1.33'
ext['spring-security.version'] = '5.7.8'
ext['hibernate-validator.version'] = '6.0.20.Final'

dependencyManagement {
  imports {
    mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
  }
  dependencies {
    // CVE-2023-24998
    dependencySet(group: 'commons-fileupload', version: '1.5') {
      entry 'commons-fileupload'
    }
    dependencySet(group: 'org.apache.tomcat.embed', version: '9.0.75') {
      entry 'tomcat-embed-core'
      entry 'tomcat-embed-el'
      entry 'tomcat-embed-websocket'
    }
  }
}

allprojects {
  group 'uk.gov.hmcts.civil.sdt'
  version '0.0.1-SNAPSHOT'

  apply plugin: 'java'

  dependencies {
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.3.1.Final', 'org.projectlombok:lombok-mapstruct-binding:0.2.0'
    annotationProcessor group: 'org.projectlombok', name: 'lombok', version: lombokVersion
    implementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.10'
    implementation group: 'ch.qos.logback', name: 'logback-core', version: '1.2.10'
    implementation group: 'com.azure', name: 'azure-core', version: '1.13.0'
    implementation group: 'com.azure', name: 'azure-messaging-servicebus', version: '7.0.2'
    implementation group: 'com.fasterxml.jackson.module', name: 'jackson-module-jaxb-annotations', version: '2.10.3'
    implementation group: 'com.github.hmcts.java-logging', name: 'logging', version: '6.0.1'
    implementation 'com.google.guava:guava:30.0-jre'
    implementation(group: 'com.microsoft.azure', name: 'azure-servicebus-jms-spring-boot-starter', version: '2.3.5') {
      exclude group: 'org.simpleframework', module: 'simple-xml'
      exclude group: 'org.nanohttpd', module: 'nanohttpd'
    }
    implementation group: 'com.sun.xml.ws', name: 'jaxws-ri', version: '3.0.2'
    implementation group: 'com.vladmihalcea', name: 'hibernate-types-52', version: '2.20.0'
    implementation group: 'com.zaxxer', name: 'HikariCP', version: '4.0.2'
    implementation group: 'commons-collections', name: 'commons-collections', version: '3.2.2'
    implementation group: 'commons-io', name: 'commons-io', version: '2.11.0'
    implementation(group: 'io.rest-assured', name: 'rest-assured') {
      exclude group: 'com.github.tomakehurst', module: 'wiremock-standalone'
      exclude group: 'commons-beanutils', module: 'commons-beanutils'
      exclude group: 'org.codehaus.groovy', module: 'groovy-xml'
      exclude group: 'org.codehaus.groovy', module: 'groovy-json'
      exclude group: 'org.codehaus.groovy', module: 'groovy'
    }
    implementation group: 'javax.inject', name: 'javax.inject', version: '1'
    implementation group: 'javax.jws', name: 'javax.jws-api', version: '1.1'
    implementation group: 'net.minidev', name: 'json-smart', version: '2.4.7'
    implementation group: 'org.apache.activemq', name: 'activemq-broker', version: activeMQVersion
    implementation group: 'org.apache.activemq', name: 'activemq-client', version: activeMQVersion
    implementation group: 'org.apache.commons', name: 'commons-compress', version: '1.21'
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.12.0'
    implementation group: 'org.apache.cxf', name: 'cxf-rt-features-logging', version: cxfVersion
    implementation group: 'org.apache.cxf', name: 'cxf-rt-transports-http-jetty', version: cxfVersion
    implementation group: 'org.apache.cxf', name: 'cxf-spring-boot-starter-jaxws', version: cxfVersion
    implementation group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.13'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: log4jVersion
    implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: log4jVersion
    implementation group: 'org.apache.logging.log4j', name: 'log4j-to-slf4j', version: log4jVersion
    implementation group: 'org.apache.tomcat.embed', name: 'tomcat-embed-core', version: tomcatVersion
    implementation group: 'org.apache.tomcat.embed', name: 'tomcat-embed-el', version: tomcatVersion
    implementation group: 'org.apache.tomcat.embed', name: 'tomcat-embed-websocket', version: tomcatVersion
    implementation group: 'org.flywaydb', name: 'flyway-core', version: '9.5.0'
    implementation group: 'org.glassfish', name: 'jakarta.el', version: '4.0.1'
    implementation group: 'org.hibernate', name: 'hibernate-validator', version: '7.0.5.Final'
    implementation group: 'org.postgresql', name: 'postgresql', version: postgresqlVersion
    implementation group: 'org.projectlombok', name: 'lombok', version: lombokVersion
    implementation group: 'org.springdoc', name: 'springdoc-openapi-ui', version: '1.6.7'
    implementation group: 'org.springdoc', name: 'springdoc-openapi-ui', version: '1.6.7'
    implementation group: 'org.springframework', name: 'spring-jms'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-activemq'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-aop'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-cache'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa'
    implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-openfeign', version: '4.0.0'
    implementation(group: 'org.springframework.boot', name: 'spring-boot-starter-jdbc') {
      exclude group: 'org.apache.tomcat', module: 'tomcat-jdbc'
    }
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-json'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-security'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web-services'
    implementation group: 'org.springframework.security', name: 'spring-security-config'
    implementation group: 'org.springframework.security', name: 'spring-security-web'
    implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-openfeign'


    implementation group: 'com.github.hmcts', name: 'civil-sdt-common', version: sdtCommonVersion
    /*
      Use actual implementation of xerces 2.12.2 instead of the one bundled with Java.  The version in openJDK contains
      a bug in XMLSchemaValidator where cvc-complex-type.4 errors are reported twice.  The bug causes some XSD validation
      tests to fail when running under openJDK 11.0.17 and above.  This dependency can be removed when the bug is fixed.
    */
    implementation group: 'xerces', name: 'xercesImpl', version: '2.12.2'
    implementation group: 'com.github.hmcts', name: 'idam-java-client', version: '3.0.1'
    implementation group: 'com.github.hmcts', name: 'service-auth-provider-java-client', version: '4.0.3'

    testImplementation libraries.junit5
    testImplementation group: 'com.fasterxml.jackson.module', name: 'jackson-module-jaxb-annotations', version: '2.13.2'
    testImplementation "com.github.hmcts:fortify-client:1.2.2:all"
    testImplementation group: 'com.github.npathai', name: 'hamcrest-optional', version: '2.0.0'
    testImplementation group: 'com.github.tomakehurst', name: 'wiremock-jre8', version: '2.25.1'
    testImplementation group: 'commons-lang', name: 'commons-lang', version: '2.6'
    testImplementation group: 'info.solidsoft.gradle.pitest', name: 'gradle-pitest-plugin', version: '1.4.0'
    testImplementation group: 'io.github.openfeign', name: 'feign-jackson', version: feignJackson
    testImplementation group: 'io.github.openfeign.form', name: 'feign-form', version: '3.8.0'
    testImplementation("io.rest-assured:json-path:${restAssuredVersion}") {
      exclude group: 'com.github.tomakehurst', module: 'wiremock-standalone'
      exclude group: 'commons-beanutils', module: 'commons-beanutils'
      exclude group: 'org.codehaus.groovy', module: 'groovy-xml'
      exclude group: 'org.codehaus.groovy', module: 'groovy-json'
      exclude group: 'org.codehaus.groovy', module: 'groovy'
    }
    testImplementation("io.rest-assured:xml-path:${restAssuredVersion}") {
      exclude group: 'com.github.tomakehurst', module: 'wiremock-standalone'
      exclude group: 'commons-beanutils', module: 'commons-beanutils'
      exclude group: 'org.codehaus.groovy', module: 'groovy-xml'
      exclude group: 'org.codehaus.groovy', module: 'groovy-json'
      exclude group: 'org.codehaus.groovy', module: 'groovy'
    }
    testImplementation group: 'org.dbunit', name: 'dbunit', version: '2.7.3'
    testImplementation group: 'org.easymock', name: 'easymock', version: '5.0.1'
    testImplementation group: 'org.exparity', name: 'hamcrest-date', version: '2.0.4'
    testImplementation group: 'org.hamcrest', name: 'hamcrest-core', version: hamcrestVersion
    testImplementation group: 'org.hamcrest', name: 'hamcrest-junit', version: '2.0.0.0'
    testImplementation group: 'org.hamcrest', name: 'hamcrest-library', version: hamcrestVersion
    testImplementation group: 'org.jdom', name: 'jdom2', version: '2.0.6.1'
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: junitVersion
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: junitVersion
    testImplementation group: 'org.mockito', name: 'mockito-inline', version: '3.11.1'
    testImplementation group: 'org.mockito', name: 'mockito-inline', version: '3.11.1'
    testImplementation group: 'org.postgresql', name: 'postgresql', version: postgresqlVersion
    testImplementation group: 'org.powermock', name: 'powermock-api-mockito2', version: '2.0.9'
    testImplementation group: 'org.powermock', name: 'powermock-module-junit4', version: '2.0.9'
    testImplementation group: 'org.projectlombok', name: 'lombok', version: lombokVersion
    testImplementation("org.springframework.boot:spring-boot-starter-test") {
      exclude group: 'junit', module: 'junit'
      exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test', {
      exclude group: 'junit', module: 'junit'
      exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation('org.springframework.cloud:spring-cloud-contract-wiremock:2.2.1.RELEASE') {
      exclude group: 'commons-beanutils', module: 'commons-beanutils'
    }
    testImplementation('org.springframework.cloud:spring-cloud-starter-contract-stub-runner:2.1.0.RELEASE') {
      exclude group: 'com.github.tomakehurst', module: 'wiremock-standalone'
      exclude group: 'commons-beanutils', module: 'commons-beanutils'
      exclude group: 'org.codehaus.groovy', module: 'groovy-xml'
      exclude group: 'org.codehaus.groovy', module: 'groovy-json'
      exclude group: 'org.codehaus.groovy', module: 'groovy'
    }
    testImplementation group: 'org.testcontainers', name: 'postgresql', version: testcontainers
    testImplementation(platform('org.junit:junit-bom:5.8.2'))
    /*
      Use actual implementation of xerces 2.12.2 instead of the one bundled with Java.  The version in openJDK contains
      a bug in XMLSchemaValidator where cvc-complex-type.4 errors are reported twice.  The bug causes some XSD validation
      tests to fail when running under openJDK 11.0.17 and above.  This dependency can be removed when the bug is fixed.
    */
    testImplementation group: 'xerces', name: 'xercesImpl', version: '2.12.2'
    testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: junitVersion
    testImplementation group: 'com.github.hmcts.civil-sdt-common', name: 'utils', version: sdtCommonVersion, classifier: 'test'
    testImplementation group: 'com.github.hmcts.civil-sdt-common', name: 'utils', version: sdtCommonVersion, classifier: 'integ-test'
    testImplementation group: 'com.github.hmcts.civil-sdt-common', name: 'domain', version: sdtCommonVersion, classifier: 'test'
    testImplementation group: 'com.github.hmcts.civil-sdt-common', name: 'producers-api', version: sdtCommonVersion, classifier: 'test'
  }

  configurations.configureEach {
    collect { configuration ->
      configuration.exclude group: 'org.apache.logging.log4j', module: 'log4j-to-slf4j'
    }
    resolutionStrategy {
      eachDependency { details ->
        if (details.requested.group == 'com.github.ben-manes.caffeine' && details.requested.name == 'caffeine') {
          details.useVersion '2.8.5'
        }
        if(details.requested.group == 'org.springframework') {
          details.useVersion '5.3.27' // CVE-2023-20861
        }
        if (details.requested.group == 'org.springframework.boot') {
          details.useVersion '2.7.12' // CVE-2023-20883
        }
        if (details.requested.group == 'com.fasterxml.woodstox' && details.requested.name == 'woodstox-core') {
          details.useVersion '6.4.0' // CVE-2022-40152
        }
      }
    }
    exclude group: 'org.springframework.security', module: 'spring-security-rsa'
  }

  tasks.withType(Copy).configureEach {
    duplicatesStrategy 'exclude'
  }
}

subprojects { subproject ->
  version = project.version

  apply plugin: 'org.springframework.boot'
  apply plugin: 'io.spring.dependency-management'
  apply plugin: 'jacoco'
  apply plugin: 'uk.gov.hmcts.java'

  dependencyManagement {
    imports {
      mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
    dependencies {
      // CVE-2023-24998
      dependencySet(group: 'commons-fileupload', version: '1.5') {
        entry 'commons-fileupload'
      }
      dependencySet(group: 'org.apache.tomcat.embed', version: '9.0.75') {
        entry 'tomcat-embed-core'
        entry 'tomcat-embed-el'
        entry 'tomcat-embed-websocket'
      }
    }
  }

  dependencies {
    implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-openfeign'
  }

  sourceSets {
    unitTest {
      java {
        compileClasspath += main.output
        runtimeClasspath += main.output
        srcDir file('src/unit-test/java')
      }
      resources.srcDir file('src/unit-test/resources')
    }

    integTest {
      java {
        compileClasspath += main.output
        runtimeClasspath += main.output
        srcDir file('src/integ-test/java')
      }
      resources.srcDir file('src/integ-test/resources')
    }

    e2eTest {
      java {
        compileClasspath += main.output
        runtimeClasspath += main.output
        srcDir file('src/end-to-end-test/java')
      }
      resources.srcDir file('src/end-to-end-test/resources')
    }
  }

  configurations.configureEach {
    collect { configuration ->
      configuration.exclude group: 'org.apache.logging.log4j', module: 'log4j-to-slf4j'
    }
    resolutionStrategy {
      eachDependency { details ->
        if(details.requested.group == 'org.springframework') {
          details.useVersion '5.3.27' // CVE-2023-20861
        }
        if (details.requested.group == 'org.springframework.boot') {
          details.useVersion '2.7.12' // CVE-2023-20883
        }
      }
    }
    exclude group: 'org.springframework.security', module: 'spring-security-rsa'
  }

  configurations {
    providedRuntime
    cucumberRuntime.extendsFrom(functionalRuntime)

    unitTestImplementation.extendsFrom testImplementation
    unitTestImplementation.extendsFrom runtimeOnly

    integTestImplementation.extendsFrom testImplementation
    integTestImplementation.extendsFrom runtimeOnly

    e2eTestImplementation.extendsFrom testImplementation
    e2eTestImplementation.extendsFrom runtimeOnly
  }

    sonarqube {
        properties {
            property "sonar.sources", "src"
            property "sonar.tests", "src"
            property "sonar.test.inclusions", "**/unit-test/**,**/integ-test/**"
            property 'sonar.exclusions', "**/**.sql"
            property "sonar.coverage.jacoco.xmlReportPaths", "${rootDir}/build/reports/jacoco/codeCoverageReport/codeCoverageReport.xml"
        }
    }

  // from https://github.com/junit-team/junit5/issues/1024'
  afterEvaluate {
    jacocoTestReport {
      reports {
        // XML required by coveralls and for the below coverage checks
        // and html are generated by default
        xml.enabled true
        html.enabled true
      }

      classDirectories.setFrom((classDirectories.files.collect {
        fileTree(dir: it)
      }))

      doLast {
        def report = file("${jacoco.reportsDir}/test/jacocoTestReport.xml")
        logger.lifecycle("Checking coverage results: ${report}")

        def parser = new XmlParser()
        parser.setFeature("http://apache.org/xml/features/nonvalidating/load-external-dtd", false)
        parser.setFeature("http://apache.org/xml/features/disallow-doctype-decl", false)
        def results = parser.parse(report)

        def percentage = {
          def covered = it.'@covered' as Double
          def missed = it.'@missed' as Double
          ((covered / (covered + missed)) * 100).round(2)
        }

        def counters = results.counter
        def metrics = [:]
        metrics << [
                'class'      : percentage(counters.find { it.'@type'.equals('CLASS') })
        ]

        def failures = []
        metrics.each {
          def limit = limits[it.key]
          if (it.value < limit) {
            failures.add("- ${it.key} coverage rate is: ${it.value}%, minimum is ${limit}%")
          }
        }

        if (failures) {
          logger.quiet("------------------ Code Coverage Failed -----------------------")
          failures.each {
            logger.quiet(it)
          }
          logger.quiet("---------------------------------------------------------------")
//          throw new GradleException("Code coverage failed")
        } else{
          logger.quiet("Passed Code Coverage Checks")
        }
      }
    }
  }

  test {
    generateCucumberReports.enabled = false
    useJUnitPlatform()

    testLogging {
      events "passed", "skipped", "failed"
    }

    reports {
      html.enabled = true
    }
    failFast = true

    description = "Runs Tests"
    testClassesDirs = sourceSets.unitTest.output.classesDirs
    classpath = sourceSets.unitTest.runtimeClasspath
  }

  tasks.register('integration', Test) {
    description = "Runs integration tests"
    group = "Verification"
    testClassesDirs = sourceSets.integTest.output.classesDirs
    classpath = sourceSets.integTest.runtimeClasspath
    failFast = true
  }

  tasks.register('endToEnd', Test) {
    description = "Runs end to end tests"
    group = "Verification"
    testClassesDirs = sourceSets.e2eTest.output.classesDirs
    classpath = sourceSets.e2eTest.runtimeClasspath
    failFast = true
  }

  tasks.jar {
    enabled = true
    // Remove `plain` postfix from jar file name
    archiveClassifier.set("")
  }

  tasks.withType(Jar).all {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
  }

  distTar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
  }

  distZip {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
  }

  tasks.withType(Test).configureEach {
    useJUnitPlatform()

    testLogging {
      exceptionFormat = 'full'
    }
  }

  test.finalizedBy jacocoTestReport
  check.dependsOn jacocoTestReport
}
// end::subprojects[]

sonarqube {
  properties {
    property "sonar.projectName", "Reform :: civil-sdt"
    property "sonar.projectKey", "uk.gov.hmcts.reform:civil-sdt"
    property 'sonar.coverage.exclusions', "**/**"
    property 'sonar.exclusions', "**/**.sql"
    property "sonar.coverage.jacoco.xmlReportPaths", "${rootDir}/build/reports/jacoco/codeCoverageReport/codeCoverageReport.xml"
  }
}

compileJava {
  options.compilerArgs << '-parameters' << '-Xlint:deprecation'
}

idea.project.settings {
  compiler {
    javac {
      javacAdditionalOptions "-parameters"
    }
  }
}

idea {
  project {
    ipr {
      withXml { provider ->
        // Get XML as groovy.util.Node to work with.
        def projectXml = provider.asNode()
        // Find compiler configuration component.
        def compilerConfiguration = projectXml.component.find { component ->
          component.'@name' == 'CompilerConfiguration'
        }
        // Replace current annotationProcessing
        // that is part of the compiler configuration.
        def currentAnnotationProcessing = compilerConfiguration.annotationProcessing
        currentAnnotationProcessing.replaceNode {
          annotationProcessing {
            profile(name: 'Default', default: true, enabled: true) {
              processorPath(useClasspath: true)
            }
          }
        }
      }
    }
  }

  module {
    inheritOutputDirs = false
    outputDir = new File("${rootDir}/build/java/${name}")
    testOutputDir = new File("${rootDir}/build/java/test/${name}")
  }
}

// this allows ./gradlew run
bootJar {
  manifest {
    attributes 'Implementation-Title': project.name,
            'Implementation-Version': project.version
  }
  duplicatesStrategy = DuplicatesStrategy.EXCLUDE
  archiveName = 'civil-sdt.jar'
}

dependencies {
  implementation project(':consumers')
  implementation project(':dao')
  implementation project(':handlers')
  implementation project(':interceptors')
  implementation project(':producers')
  implementation project(':services')
  implementation project(':transformers')
  implementation project(':validators')
}


task codeCoverageReport(type: JacocoReport, dependsOn: [allprojects*.test, allprojects*.jacocoTestReport]) {

  // Gather execution data from all subprojects
  // (change this if you e.g. want to calculate unit test/integration test coverage separately)
  executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

  // Add all relevant sourcesets from the subprojects
  allprojects.each {
    sourceSets it.sourceSets.main
  }

  reports {
    csv.enabled = false
    html.enabled = true
    html.destination = file("${buildDir}/reports/jacoco/html")
    xml.enabled = true
    xml.destination = file("${buildDir}/reports/jacoco/jacocoTestReport.xml")
  }
}

// for cnp pipeline
tasks.register('dependencyCheck') { dependsOn dependencyCheckAnalyze }

configurations { codacy }

dependencies {
  codacy 'com.github.codacy:codacy-coverage-reporter:-SNAPSHOT'
}

tasks.register('sendCoverageToCodacy', JavaExec) {
  dependsOn jacocoTestReport
  main = "com.codacy.CodacyCoverageReporter"
  classpath = configurations.codacy
  args = [
    "report",
    "-l",
    "Java",
    "-r",
    "${buildDir}/reports/jacoco/jacocoTestReport.xml"
  ]
}

tasks.register('fortifyScan', JavaExec) {
  main = "uk.gov.hmcts.fortifyclient.FortifyClientMainApp"
  classpath += sourceSets.test.runtimeClasspath
  jvmArgs = ['--add-opens=java.base/java.lang.reflect=ALL-UNNAMED']
  // The line below prevents the build from failing if the Fortify scan detects issues
  ignoreExitValue = true
}

cucumberReports {
  outputDir = file("${rootDir}/target/cucumber")
  reports = files("${rootDir}/target/cucumber.json")
}
